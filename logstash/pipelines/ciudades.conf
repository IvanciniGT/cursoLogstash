# Procesar fichero de paises y ciudades
#
# Ejemplo:
#     Country,City,AccentCity,Region,Population,Latitude,Longitude
#     ad,aixas,Aixàs,06,,42.4833333,1.4666667
#     ad,aixirivali,Aixirivali,06,,42.466666700000005,1.5
#     ad,aixirivall,Aixirivall,06,,42.466666700000005,1.5
#     ad,aixirvall,Aixirvall,06,,42.466666700000005,1.5
#     ad,aixovall,Aixovall,06,,42.466666700000005,1.4833333
#     ad,andorra,Andorra,07,,42.5,1.5166667
#     ad,andorra la vella,Andorra la Vella,07,20430.0,42.5,1.5166667
#     ad,andorra-vieille,Andorra-Vieille,07,,42.5,1.5166667
#

# Leer los datos del fichero.
#   Realmente los vamos a leer con FILEBEAT y me va llegar por el procolo BEATS
#   Las lineas van llegando de una en una
input {
    beats {
        port => 5044
    }
}

# Procesarlos antes de mandar a Elastic
filter {
# PASO 0: Tener cuidado si el fichero trae una cabecera... eso lo debería de eliminar
#     CABECERA: Country,City,AccentCity,Region,Population,Latitude,Longitude
    if [message] == "Country,City,AccentCity,Region,Population,Latitude,Longitude" {
        drop {}
    }
# Con fines de pruebas, eliminamos la mayor parte de los datos
    drop{
        percentage => 99
    }
# PASO 1: Partir los campos (country,city,accentcity,region,population,latitude,longitude)
# EJEMPLO:     ad,aixas,Aixàs,06,,42.4833333,1.4666667
    csv {
        source => "message"
        separator => ","
        columns => [
            "country",
            "city",
            "accentcity",
            "region",
            "population",
            "latitude",
            "longitude"
        ]
        skip_empty_columns => true
    }
    mutate {
        convert => {
            "country" => "string"
            "city" => "string"
            "accentcity" => "string"
            "region" => "string"
        }

    }
# PASO 2: Accent city (Caracteres raros, pero me da igual...)
# PASO 3: Popularion... a veces viene vacio: 2 Opciones: 
#           1-lo quito    <--------------
#           2-le pongo  por ejemplo un -1
if [population] {
    mutate {
        convert => {"population" => "integer"}
    }
}
# PASO 4: Longitud y Latitud los tengo que transformar a NUMEROS DECIMALES
    # Lo hice arriba... el el csv

# PASO 5: Population lo transformo a NUMERO
    # Lo hice arriba... el el csv

# PASO 6: Region lo transformo a NUMERO  <-  OJO !!!!!  va a quitar el cero de delante
#         Tendría sentido transformar a NUMERO cuando vaya a querer hacer búsquedas de tipo RANGO (>, <, >=, ...)
#         Tendría sentido transformar a NUMERO cuando vaya a querer hacer operaciones (+, -, *, /)
#         El campo se llama REGION: Es una cantidad ??? Es un IDENTIFICADOR NO TIENE SENTIDO TRANFORMARLO A NUMERO
    # Decision no hago nada

# PASO 7: Tratamiento de latitud y longitud
#         Que tengo?? ESTO NO VALE
#       {
#           ....
#           "latitude": 198261982,
#           "longitude": 198261982
#       }
#
#         Que necesita elastic??
#   Escenario 1
#       {
#           ....
#           "posicion": {
#               "lat": 198261982,
#               "lon": 198261982
#           }
#       }        
#   Escenario 2
#       {
#           ....
#           "posicion": "198261982,198261982"
#       }        
#   Escenario 3     <<<<<<< A ESTO LO VAMOS A TRANSFORMAR
#       {
#           ....
#           "posicion": [ 198261982 , 198261982 ]
#       }        
    mutate {
        add_field => {
            "posicion" => ["%{longitude}","%{latitude}"]
        }
    }    
    mutate {
        convert => {
            "posicion" => "float"
        }
    }
    
    
}        

# Enviar los datos a elasticsearch
# Hacer un mapping con los tipos de datos correctos
#     country      <- keyword
#     city         <- keyword
#     accentcity   <- text
#     region       <- keyword
#     population   <- long
#     posicion     <- geo_point
output {
    #stdout {}
    elasticsearch {
        hosts => [ "http://172.31.0.228:9201" , "http://172.31.0.228:9202" ]
        user => elastic
        password => password
        index => "ciudades-%{+YYYY.MM}"
        
        manage_template => true
        template_name => ciudades_template
        template => "/templates/ciudades.json"
        
    }
    
}